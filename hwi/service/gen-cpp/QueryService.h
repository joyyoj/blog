/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef QueryService_H
#define QueryService_H

#include <thrift/TDispatchProcessor.h>
#include "queryengine_types.h"

namespace queryengine {

class QueryServiceIf {
 public:
  virtual ~QueryServiceIf() {}
  virtual void GetCompletion(std::string& _return, const std::string& prefix, const std::string& line, const std::string& content) = 0;
};

class QueryServiceIfFactory {
 public:
  typedef QueryServiceIf Handler;

  virtual ~QueryServiceIfFactory() {}

  virtual QueryServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(QueryServiceIf* /* handler */) = 0;
};

class QueryServiceIfSingletonFactory : virtual public QueryServiceIfFactory {
 public:
  QueryServiceIfSingletonFactory(const boost::shared_ptr<QueryServiceIf>& iface) : iface_(iface) {}
  virtual ~QueryServiceIfSingletonFactory() {}

  virtual QueryServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(QueryServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<QueryServiceIf> iface_;
};

class QueryServiceNull : virtual public QueryServiceIf {
 public:
  virtual ~QueryServiceNull() {}
  void GetCompletion(std::string& /* _return */, const std::string& /* prefix */, const std::string& /* line */, const std::string& /* content */) {
    return;
  }
};

typedef struct _QueryService_GetCompletion_args__isset {
  _QueryService_GetCompletion_args__isset() : prefix(false), line(false), content(false) {}
  bool prefix;
  bool line;
  bool content;
} _QueryService_GetCompletion_args__isset;

class QueryService_GetCompletion_args {
 public:

  QueryService_GetCompletion_args() : prefix(), line(), content() {
  }

  virtual ~QueryService_GetCompletion_args() throw() {}

  std::string prefix;
  std::string line;
  std::string content;

  _QueryService_GetCompletion_args__isset __isset;

  void __set_prefix(const std::string& val) {
    prefix = val;
  }

  void __set_line(const std::string& val) {
    line = val;
  }

  void __set_content(const std::string& val) {
    content = val;
  }

  bool operator == (const QueryService_GetCompletion_args & rhs) const
  {
    if (!(prefix == rhs.prefix))
      return false;
    if (!(line == rhs.line))
      return false;
    if (!(content == rhs.content))
      return false;
    return true;
  }
  bool operator != (const QueryService_GetCompletion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryService_GetCompletion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QueryService_GetCompletion_pargs {
 public:


  virtual ~QueryService_GetCompletion_pargs() throw() {}

  const std::string* prefix;
  const std::string* line;
  const std::string* content;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QueryService_GetCompletion_result__isset {
  _QueryService_GetCompletion_result__isset() : success(false) {}
  bool success;
} _QueryService_GetCompletion_result__isset;

class QueryService_GetCompletion_result {
 public:

  QueryService_GetCompletion_result() : success() {
  }

  virtual ~QueryService_GetCompletion_result() throw() {}

  std::string success;

  _QueryService_GetCompletion_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const QueryService_GetCompletion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const QueryService_GetCompletion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryService_GetCompletion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QueryService_GetCompletion_presult__isset {
  _QueryService_GetCompletion_presult__isset() : success(false) {}
  bool success;
} _QueryService_GetCompletion_presult__isset;

class QueryService_GetCompletion_presult {
 public:


  virtual ~QueryService_GetCompletion_presult() throw() {}

  std::string* success;

  _QueryService_GetCompletion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class QueryServiceClient : virtual public QueryServiceIf {
 public:
  QueryServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  QueryServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetCompletion(std::string& _return, const std::string& prefix, const std::string& line, const std::string& content);
  void send_GetCompletion(const std::string& prefix, const std::string& line, const std::string& content);
  void recv_GetCompletion(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class QueryServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<QueryServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (QueryServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_GetCompletion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  QueryServiceProcessor(boost::shared_ptr<QueryServiceIf> iface) :
    iface_(iface) {
    processMap_["GetCompletion"] = &QueryServiceProcessor::process_GetCompletion;
  }

  virtual ~QueryServiceProcessor() {}
};

class QueryServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  QueryServiceProcessorFactory(const ::boost::shared_ptr< QueryServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< QueryServiceIfFactory > handlerFactory_;
};

class QueryServiceMultiface : virtual public QueryServiceIf {
 public:
  QueryServiceMultiface(std::vector<boost::shared_ptr<QueryServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~QueryServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<QueryServiceIf> > ifaces_;
  QueryServiceMultiface() {}
  void add(boost::shared_ptr<QueryServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void GetCompletion(std::string& _return, const std::string& prefix, const std::string& line, const std::string& content) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetCompletion(_return, prefix, line, content);
    }
    ifaces_[i]->GetCompletion(_return, prefix, line, content);
    return;
  }

};

} // namespace

#endif
